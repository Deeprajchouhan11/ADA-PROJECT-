// merge sort in c++

#include <iostream>
using namespace std;

// merge two subarrays l and m into arr
void merge(int arr[], int p, int q, int r) {
  
  // create l ← a[p..q] and m ← a[q+1..r]
  int n1 = q - p + 1;
  int n2 = r - q;

  int l[n1], m[n2];

  for (int i = 0; i < n1; i++)
    l[i] = arr[p + i];
  for (int j = 0; j < n2; j++)
    m[j] = arr[q + 1 + j];

  // maintain current index of sub-arrays and main array
  int i, j, k;
  i = 0;
  j = 0;
  k = p;

  // until we reach either end of either l or m, pick larger among
  // elements l and m and place them in the correct position at a[p..r]
  while (i < n1 && j < n2) {
    if (l[i] <= m[j]) {
      arr[k] = l[i];
      i++;
    } else {
      arr[k] = m[j];
      j++;
    }
    k++;
  }

  // when we run out of elements in either l or m,
  // pick up the remaining elements and put in a[p..r]
  while (i < n1) {
    arr[k] = l[i];
    i++;
    k++;
  }

  while (j < n2) {
    arr[k] = m[j];
    j++;
    k++;
  }
}

// divide the array into two subarrays, sort them and merge them
void mergesort(int arr[], int l, int r) {
  if (l < r) {
    // m is the point where the array is divided into two subarrays
    int m = l + (r - l) / 2;

    mergesort(arr, l, m);
    mergesort(arr, m + 1, r);

    // merge the sorted subarrays
    merge(arr, l, m, r);
  }
}

// print the array
void printarray(int arr[], int size) {
  for (int i = 0; i < size; i++)
    cout << arr[i] << " ";
  cout << endl;
}

// driver program
int main() {
  int arr[] = {6, 5, 12, 10, 9, 1};
  int size = sizeof(arr) / sizeof(arr[0]);

  mergesort(arr, 0, size - 1);

  cout << "sorted array: \n";
  printarray(arr, size);
  return 0;
}￼enter
